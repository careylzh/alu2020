/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module fsmLogic_1 (
    input clk,
    input rst,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel
  );
  
  
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg [15:0] alu;
  
  wire [16-1:0] M_alumod_alu;
  wire [1-1:0] M_alumod_z;
  wire [1-1:0] M_alumod_v;
  wire [1-1:0] M_alumod_n;
  reg [6-1:0] M_alumod_alufn;
  reg [16-1:0] M_alumod_a;
  reg [16-1:0] M_alumod_b;
  alu_3 alumod (
    .alufn(M_alumod_alufn),
    .a(M_alumod_a),
    .b(M_alumod_b),
    .alu(M_alumod_alu),
    .z(M_alumod_z),
    .v(M_alumod_v),
    .n(M_alumod_n)
  );
  
  reg [15:0] M_store_a_d, M_store_a_q = 1'h0;
  reg [15:0] M_store_b_d, M_store_b_q = 1'h0;
  reg [5:0] M_store_alufn_d, M_store_alufn_q = 1'h0;
  localparam IDLE_state = 5'd0;
  localparam ADD1_state = 5'd1;
  localparam ADD2_state = 5'd2;
  localparam SUB1_state = 5'd3;
  localparam SUB2_state = 5'd4;
  localparam MUL_state = 5'd5;
  localparam DIV_state = 5'd6;
  localparam AND_state = 5'd7;
  localparam OR_state = 5'd8;
  localparam XOR_state = 5'd9;
  localparam NOR_state = 5'd10;
  localparam NAND_state = 5'd11;
  localparam A_state = 5'd12;
  localparam B_state = 5'd13;
  localparam BSL_state = 5'd14;
  localparam BSR_state = 5'd15;
  localparam ASL_state = 5'd16;
  localparam ASR_state = 5'd17;
  localparam COMEQ1_state = 5'd18;
  localparam COMEQ2_state = 5'd19;
  localparam COMLT1_state = 5'd20;
  localparam COMLT2_state = 5'd21;
  localparam COMLT3_state = 5'd22;
  localparam COMLE1_state = 5'd23;
  localparam COMLE2_state = 5'd24;
  localparam COMLE3_state = 5'd25;
  localparam SUCC_state = 5'd26;
  localparam FAIL_state = 5'd27;
  localparam MANUAL_state = 5'd28;
  
  reg [4:0] M_state_d, M_state_q = IDLE_state;
  wire [1-1:0] M_stateCOUNT_inc_state;
  stateCounter_4 stateCOUNT (
    .clk(clk),
    .rst(rst),
    .inc_state(M_stateCOUNT_inc_state)
  );
  wire [7-1:0] M_seg_seg;
  wire [2-1:0] M_seg_sel;
  reg [8-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_store_a_d = M_store_a_q;
    M_store_b_d = M_store_b_q;
    M_store_alufn_d = M_store_alufn_q;
    
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    a = 8'h00;
    b = 8'h00;
    M_seg_values = 8'h00;
    io_led[0+7-:8] = a[0+7-:8];
    io_led[8+7-:8] = a[8+7-:8];
    alufn = io_dip[0+2+5-:6];
    M_alumod_alufn = alufn;
    M_alumod_a = a;
    M_alumod_b = b;
    alu = M_alumod_alu;
    io_led = 24'h000000;
    
    case (M_state_q)
      IDLE_state: begin
        M_seg_values = 8'h99;
        if (io_button[1+0-:1]) begin
          M_state_d = ADD1_state;
        end
        if (io_dip[0+0+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
      MANUAL_state: begin
        if (io_dip[0+1+0-:1]) begin
          a[0+7-:8] = io_dip[8+7-:8];
          a[8+7-:8] = io_dip[16+7-:8];
          if (io_button[1+0-:1]) begin
            M_store_a_d = a;
          end
        end else begin
          b[0+7-:8] = io_dip[8+7-:8];
          b[8+7-:8] = io_dip[16+7-:8];
          if (io_button[2+0-:1]) begin
            M_store_b_d = b;
          end
        end
        alufn = io_dip[0+2+5-:6];
        if (io_button[3+0-:1]) begin
          M_store_alufn_d = alufn;
        end
        if (io_button[4+0-:1]) begin
          M_store_a_d = 16'h0000;
          M_store_b_d = 16'h0000;
          M_store_alufn_d = 6'h00;
        end
        M_alumod_a = M_store_a_q;
        M_alumod_b = M_store_b_q;
        M_alumod_alufn = M_store_alufn_q;
        alu = M_alumod_alu;
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+0+0-:1] = 1'h1;
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      ADD1_state: begin
        M_alumod_alufn = 6'h00;
        M_alumod_a = 16'h7fff;
        M_alumod_b = 16'h0001;
        alu = M_alumod_alu;
        M_seg_values = 8'h01;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h8000 && M_alumod_v == 1'h1 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = ADD2_state;
        end else begin
          if ((alu != 16'h8000 || M_alumod_v != 1'h1) && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (rst) begin
          M_state_d = IDLE_state;
        end
      end
      ADD2_state: begin
        M_alumod_alufn = 6'h00;
        M_alumod_a = 16'h0001;
        M_alumod_b = 16'h0001;
        alu = M_alumod_alu;
        M_seg_values = 8'h02;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0002 && M_alumod_v == 1'h0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = SUB1_state;
        end else begin
          if ((alu != 16'h0002 || M_alumod_v != 1'h0) && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      SUB1_state: begin
        M_alumod_alufn = 6'h01;
        M_alumod_a = 16'h8000;
        M_alumod_b = 16'h0001;
        alu = M_alumod_alu;
        M_seg_values = 8'h03;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h7fff && M_alumod_v == 1'h1 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = SUB2_state;
        end else begin
          if ((alu != 16'h7fff || M_alumod_v != 1'h1) && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      SUB2_state: begin
        M_alumod_alufn = 6'h01;
        M_alumod_a = 16'h8002;
        M_alumod_b = 16'h8001;
        alu = M_alumod_alu;
        M_seg_values = 8'h04;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 15'h0001 && M_alumod_v == 1'h0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = MUL_state;
        end else begin
          if ((alu != 15'h0001 || M_alumod_v != 1'h0) && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        io_led[0+7+0-:1] = M_alumod_z;
        io_led[0+6+0-:1] = M_alumod_v;
        io_led[0+5+0-:1] = M_alumod_n;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      MUL_state: begin
        M_alumod_alufn = 6'h30;
        M_alumod_a = 16'h0002;
        M_alumod_b = 16'h0002;
        alu = M_alumod_alu;
        M_seg_values = 8'h05;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0004 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = DIV_state;
        end else begin
          if (alu != 16'h0004 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      DIV_state: begin
        M_alumod_alufn = 6'h37;
        M_alumod_a = 16'h0004;
        M_alumod_b = 16'h0002;
        alu = M_alumod_alu;
        M_seg_values = 8'h06;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0002 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = AND_state;
        end else begin
          if (alu != 16'h0002 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      AND_state: begin
        M_alumod_alufn = 6'h18;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h07;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0f00 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = OR_state;
        end else begin
          if (alu != 16'h0f00 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      OR_state: begin
        M_alumod_alufn = 6'h1e;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h08;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0fff && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = XOR_state;
        end else begin
          if (alu != 16'h0fff && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      XOR_state: begin
        M_alumod_alufn = 6'h16;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h09;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h00ff && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = NAND_state;
        end else begin
          if (alu != 16'h00ff && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      NAND_state: begin
        M_alumod_alufn = 6'h17;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h10;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'hf0ff && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = NOR_state;
        end else begin
          if (alu != 16'hf0ff && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      NOR_state: begin
        M_alumod_alufn = 6'h11;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h11;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'hf000 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = A_state;
        end else begin
          if (alu != 16'hf000 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      A_state: begin
        M_alumod_alufn = 6'h1a;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h12;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0f0f && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = B_state;
        end else begin
          if (alu != 16'h0f0f && M_stateCOUNT_inc_state == 1'h1) begin
            
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      B_state: begin
        M_alumod_alufn = 6'h1c;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0ff0;
        alu = M_alumod_alu;
        M_seg_values = 8'h13;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0ff0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = BSL_state;
        end else begin
          if (alu != 16'h0ff0 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      BSL_state: begin
        M_alumod_alufn = 6'h20;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0004;
        alu = M_alumod_alu;
        M_seg_values = 8'h14;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'hf0f0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = BSR_state;
        end else begin
          if (alu != 16'hf0f0 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      BSR_state: begin
        M_alumod_alufn = 6'h21;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0004;
        alu = M_alumod_alu;
        M_seg_values = 8'h15;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h00f0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = ASL_state;
        end else begin
          if (alu != 16'h00f0 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      ASL_state: begin
        M_alumod_alufn = 6'h22;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0004;
        alu = M_alumod_alu;
        M_seg_values = 8'h16;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'hf0f0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = ASR_state;
        end else begin
          if (alu != 16'hf0f0 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      ASR_state: begin
        M_alumod_alufn = 6'h23;
        M_alumod_a = 16'h0f0f;
        M_alumod_b = 16'h0004;
        alu = M_alumod_alu;
        M_seg_values = 8'h17;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h00f0 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMEQ1_state;
        end else begin
          if (alu != 16'h00f0 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMEQ1_state: begin
        M_alumod_alufn = 6'h32;
        M_alumod_a = 16'h0fff;
        M_alumod_b = 16'h0000;
        alu = M_alumod_alu;
        M_seg_values = 8'h18;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMEQ2_state;
        end else begin
          if (alu != 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMEQ2_state: begin
        M_alumod_alufn = 6'h32;
        M_alumod_a = 16'hffff;
        M_alumod_b = 16'hffff;
        alu = M_alumod_alu;
        M_seg_values = 8'h19;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMLT1_state;
        end else begin
          if (alu != 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMLT1_state: begin
        M_alumod_alufn = 6'h34;
        M_alumod_a = 16'h0fff;
        M_alumod_b = 16'h0000;
        alu = M_alumod_alu;
        M_seg_values = 8'h20;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMLT2_state;
        end else begin
          if (alu != 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMLT2_state: begin
        M_alumod_alufn = 6'h34;
        M_alumod_a = 16'h0000;
        M_alumod_b = 16'h0fff;
        alu = M_alumod_alu;
        M_seg_values = 8'h21;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMLT3_state;
        end else begin
          if (alu != 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMLT3_state: begin
        M_alumod_alufn = 6'h34;
        M_alumod_a = 16'hffff;
        M_alumod_b = 16'hffff;
        alu = M_alumod_alu;
        M_seg_values = 8'h22;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMLE1_state;
        end else begin
          if (alu != 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMLE1_state: begin
        M_alumod_alufn = 6'h36;
        M_alumod_a = 16'h0fff;
        M_alumod_b = 16'h0000;
        alu = M_alumod_alu;
        M_seg_values = 8'h23;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMLE2_state;
        end else begin
          if (alu != 16'h0000 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMLE2_state: begin
        M_alumod_alufn = 6'h36;
        M_alumod_a = 16'hffff;
        M_alumod_b = 16'hffff;
        alu = M_alumod_alu;
        M_seg_values = 8'h24;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = COMLE3_state;
        end else begin
          if (alu != 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      COMLE3_state: begin
        M_alumod_alufn = 6'h36;
        M_alumod_b = 16'h0fff;
        M_alumod_a = 16'h0000;
        alu = M_alumod_alu;
        M_seg_values = 8'h25;
        if (io_dip[16+7+0-:1]) begin
          alu = alu + 1'h1;
        end
        if (alu == 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
          M_state_d = SUCC_state;
        end else begin
          if (alu != 16'h0001 && M_stateCOUNT_inc_state == 1'h1) begin
            M_state_d = FAIL_state;
          end
        end
        io_led[8+7-:8] = alu[0+7-:8];
        io_led[16+7-:8] = alu[8+7-:8];
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      SUCC_state: begin
        M_seg_values = 8'h88;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
      FAIL_state: begin
        M_seg_values = 8'h44;
        if (rst == 1'h1) begin
          M_state_d = IDLE_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_store_a_q <= 1'h0;
      M_store_b_q <= 1'h0;
      M_store_alufn_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_store_a_q <= M_store_a_d;
      M_store_b_q <= M_store_b_d;
      M_store_alufn_q <= M_store_alufn_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
