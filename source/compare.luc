module compare (
    input alufn[6],           //inputs
    input z,
    input v,
    input n,
    input a[16],
    input b[16],
    
    output cmp[16]            //output
  ) {
  
  sig cmp1;
  sig mul[16];
  sig div[16];
 
  always {
    
    case(alufn[2:0]){
    
      3b010: cmp1 = a==b;                //when alufn[2:1] = 01, compare a=b, if z = 1, a=b
             cmp[15:1] = 15b0;        //bit 1 to bit 15 are 0s
             cmp[0] = cmp1;           //least significant bit 
        
      3b100: cmp1 = a<b;              //when alufn[2:1] = 10, compare a<b   
             cmp[15:1] = 15b0;        //bit 1 to bit 15 are 0s
             cmp[0] = cmp1;           //least significant bit  
                
      3b110: cmp1 = a<=b;          //when alufn[2:1] = 11, compare a<=b
             cmp[15:1] = 15b0;        //bit 1 to bit 15 are 0s
             cmp[0] = cmp1;           //least significant bit 
      
      3b000: mul = a*b;
             cmp = mul[15:0];
        
      3b111: div = a/b;
             cmp = div[15:0];
         
      default: cmp = 16b0;     //default values all 0s 
    }
  }
}
